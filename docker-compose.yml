version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: crawl4ai
      POSTGRES_USER: crawl4ai_user
      POSTGRES_PASSWORD: crawl4ai_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - crawl4ai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crawl4ai_user -d crawl4ai"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (for session data and caching)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - crawl4ai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Python Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgresql://crawl4ai_user:crawl4ai_password@postgres:5432/crawl4ai
      - REDIS_URL=redis://redis:6379/0
      - FLASK_ENV=development
      - PYTHONPATH=/app
    volumes:
      - ./:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - crawl4ai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Vite + Svelte)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:5000/api
    volumes:
      - ./src:/app/src
      - ./public:/app/public
      - ./index.html:/app/index.html
      - ./package.json:/app/package.json
      - ./vite.config.js:/app/vite.config.js
      - ./tailwind.config.js:/app/tailwind.config.js
      - ./postcss.config.js:/app/postcss.config.js
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - crawl4ai-network

volumes:
  postgres_data:
  redis_data:

networks:
  crawl4ai-network:
    driver: bridge